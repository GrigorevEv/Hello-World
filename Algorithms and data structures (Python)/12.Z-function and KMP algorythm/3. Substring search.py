# https://e-maxx.ru/algo/z_function
# Поиск подстроки в строке
# Во избежании путаницы, назовём одну строку текстом , другую — образцом . Таким образом,
# задача заключается в том, чтобы найти все вхождения образца в текст .
# Для решения этой задачи образуем строку s = p + # + t, т.е. к образцу припишем текст через символ -
# разделитель (который не встречается нигде в самих строках).
# Посчитаем для полученной строки Z-функцию. Тогда для любого i в отрезке [0, len(t) - 1] по
# соответствующему значению z[i + len(p) + 1] можно понять, входит ли образец p в текст t, начиная с
# позиции i: если это значение Z-функции равно len(p), то да, входит, иначе — нет.
# Таким образом, асимптотика решения получилась O(len(p) + len(t)). Потребление памяти имеет ту
# же асимптотику.


def z_func(t, p):
    s = p + '#' + t
    n = len(s)
    k = 0
    z = [0] * len(s)
    l, r = 0, 0  # координаты самого правого отрезка совпадения
    for i in range(1, n):
        if i <= r:
            z[i] = min(r - i + 1, z[i - l])
            # i > r — т.е. текущая позиция лежит за пределами того, что мы уже успели обработать.
        while i + z[i] < n and s[z[i]] == s[i + z[i]]:
            z[i] += 1
        if i + z[i] - 1 > r:  # здесь выполняется обновление текущего самого правого отрезка совпадения [l;r]
            l = i
            r = i + z[i] - 1
    for i in range(len(t)):
        if z[i + len(p) + 1] == len(p):
            k += 1
    print(k, 'вхожд.')


z_func('abaaaba', 'aba')
